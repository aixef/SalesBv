/***************************************************************************************************
This development controls double execution of triggers to avoid unnecessary loops and Apex limits over process.
------------------------------------------------------------
Alpha Review Requirement
------------------------------------------------------------
Precondition: Pass the API Name of the trigger to control as a string.
------  ----------  ------------------------------------------	-----------
Number  Date        Author                 				Description
------  ----------  ------------------------------------------	-----------
1.0     30-06-2012  Wilmer Piedrahita (Avanxo - www.avanxo.com) Class creation

***** RELEASE NOTES:
This component allows to control the times that a triggers is been fired in the same thread of execution.
It is frecuently generated by the Workflows rules that have Update fields operation.
The trigger API Name should be pass as the input parameter in a string value. The API name is suggested
to avoid duplication of names and unexpected behavior of this control. As the API name is Unique, then,
it is possible to set this control to multiple triggers even if they belong to the same object or, if
they are being fired at the same time (thread) in a cascade DML operation.

Example of how to use it (in your trigger):

trigger TriggerName_tgr on sObjectName (before insert,after insert) {
// Flag that avoids multiexecution of trigger
if(!TriggerExecutionControl_cls.hasAlreadyDone('TriggerName_tgr'))
{
// your code here

// If everything has been processed ok until this moment, then the flag of execution is changed to avoid loop
// Indicates that trigger has been executed in this thread and blocks a second execution.
TriggerExecutionControl_cls.setAlreadyDone('TriggerName_tgr');
}
}

TIP:
As the deployment process runs all testclasses, it is possible that this control could be fired BEFORE you wanted to
test it in the corresponding class. So, it is necessary in testmethods to call the "resetTriggerExecutionStatus" method
in your testclass in order to enable the corresponding trigger execute when expected.

**************************************************************************************************/
public with sharing class TriggerExecutionControl_cls {
/** Variable to avoid the trigger execution loop.*/
	private static set<string> executTriggSet = new set<string>();

	private TriggerExecutionControl_cls() {

	}
	/**
    * Indicate if trigger has been fired once in the same thread
    *
    * @param  strAPINameOfTrigger
    * @return
    */
	public static boolean hasAlreadyDone(string strAPINameOfTrigger) {
	if(executTriggSet.isEmpty()) {
		return false;
	} else {
			return executTriggSet.contains(strAPINameOfTrigger);
		}
}

	/**
    * Sets that trigger has been fired
    *
    * @param  strAPINameOfTrigger
    * @return
    */
	public static void setAlreadyDone(string strAPINameOfTrigger) {
	executTriggSet.add(strAPINameOfTrigger);
}

	/**
    * Indica que NO se ha ejecutado el trigger (opcional)
    *
    * @param  strAPINameOfTrigger
    * @return
    */
	public static void resetTriggerExecutionStatus(string strAPINameOfTrigger) {
	executTriggSet.remove(strAPINameOfTrigger);
}

}